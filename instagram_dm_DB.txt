-- INSTARGRAM 데이터베이스 생성 및 사용
CREATE DATABASE IF NOT EXISTS INSTARGRAM;
USE INSTARGRAM;

-- USERS 테이블 생성
CREATE TABLE IF NOT EXISTS USERS(
	ID	VARCHAR(15) NOT NULL,
	PASSWORD VARCHAR(255) NOT NULL,
    EMAIL	VARCHAR(100) NOT NULL,
    CREATED_AT	DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    BIRTHDAY	DATE  NOT NULL,
    PHONE_NUMBER	VARCHAR(15) NOT NULL,
    PROFILE_IMAGE LONGBLOB,
    PRIMARY KEY(ID),
    UNIQUE(EMAIL)
) ENGINE=InnoDB;

-- POSTS 테이블 생성
CREATE TABLE IF NOT EXISTS POSTS (
	POST_ID INT NOT NULL AUTO_INCREMENT,
    TEXT TEXT NOT NULL,
    IMAGE LONGBLOB,
    WRITER_ID VARCHAR(15) NOT NULL,
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	NUM_OF_LIKES INT NOT NULL DEFAULT 0,
	PRIMARY KEY(POST_ID),
    FOREIGN KEY(WRITER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    INDEX idx_writer_id (WRITER_ID)
) ENGINE=InnoDB;

-- COMMENTS 테이블 생성
CREATE TABLE IF NOT EXISTS COMMENTS(
	COMMENT_ID INT NOT NULL AUTO_INCREMENT,
    TEXT TEXT NOT NULL,
    WRITER_ID VARCHAR(15) NOT NULL,
    POST_ID INT NOT NULL,
    NUM_OF_LIKES INT NOT NULL DEFAULT 0,
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(COMMENT_ID),
    FOREIGN KEY(WRITER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (POST_ID) REFERENCES POSTS(POST_ID) ON DELETE CASCADE,
    INDEX idx_comment_writer_id (WRITER_ID),
    INDEX idx_comment_post_id (POST_ID)
) ENGINE=InnoDB;

-- POST_LIKE 테이블 생성
CREATE TABLE IF NOT EXISTS POST_LIKE (
	POST_ID INT NOT NULL,
    USER_ID VARCHAR(15) NOT NULL,
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(POST_ID, USER_ID),
    FOREIGN KEY(POST_ID) REFERENCES POSTS(POST_ID) ON DELETE CASCADE,
    FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    INDEX idx_post_like_user_id (USER_ID)
) ENGINE=InnoDB;

-- COMMENTS_LIKE 테이블 생성
CREATE TABLE IF NOT EXISTS COMMENTS_LIKE (
	COMMENT_ID INT NOT NULL,
    USER_ID VARCHAR(15) NOT NULL,
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(COMMENT_ID, USER_ID),
    FOREIGN KEY(COMMENT_ID) REFERENCES COMMENTS(COMMENT_ID) ON DELETE CASCADE,
    FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    INDEX idx_comment_like_user_id (USER_ID)
) ENGINE=InnoDB;

-- FOLLOW 테이블 생성
CREATE TABLE IF NOT EXISTS FOLLOW (
    FOLLOWING_ID VARCHAR(15) NOT NULL,
    FOLLOWER_ID VARCHAR(15) NOT NULL,
    CREATE_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (FOLLOWING_ID, FOLLOWER_ID),
    FOREIGN KEY (FOLLOWING_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (FOLLOWER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    INDEX idx_following_id (FOLLOWING_ID),
    INDEX idx_follower_id (FOLLOWER_ID),
    UNIQUE KEY unique_follow (FOLLOWING_ID, FOLLOWER_ID)
) ENGINE=InnoDB;

-- REELS 테이블 생성
CREATE TABLE IF NOT EXISTS REELS (
    REEL_ID INT PRIMARY KEY AUTO_INCREMENT,
    VIDEO_URL VARCHAR(255) NOT NULL, -- 영상 파일의 URL 또는 경로
    DESCRIPTION VARCHAR(500), -- 영상 설명
    UPLOADER_ID VARCHAR(50) NOT NULL, -- USERS 테이블의 ID (외래 키)
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    NUM_OF_LIKES INT DEFAULT 0,
    NUM_OF_COMMENTS INT DEFAULT 0,
    FOREIGN KEY (UPLOADER_ID) REFERENCES USERS(ID)
);

-- MESSAGES 테이블 생성
CREATE TABLE IF NOT EXISTS MESSAGES (
    MESSAGE_ID INT NOT NULL AUTO_INCREMENT,
    SENDER_ID VARCHAR(15) NOT NULL, -- 메시지를 보낸 사용자 ID (외래 키)
    RECEIVER_ID VARCHAR(15) NOT NULL, -- 메시지를 받는 사용자 ID (외래 키)
    CONTENT TEXT NOT NULL, -- 메시지 내용
    SENT_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 메시지 전송 시간
    IS_READ BOOLEAN NOT NULL DEFAULT FALSE, -- 메시지 읽음 여부
    PRIMARY KEY (MESSAGE_ID),
    FOREIGN KEY (SENDER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    INDEX idx_sender_id (SENDER_ID),
    INDEX idx_receiver_id (RECEIVER_ID)
) ENGINE=InnoDB;

-- MESSAGE_NOTIFICATIONS 테이블 생성
CREATE TABLE IF NOT EXISTS MESSAGE_NOTIFICATIONS (
    NOTIFICATION_ID INT NOT NULL AUTO_INCREMENT,
    MESSAGE_ID INT NOT NULL, -- 알림과 관련된 메시지 ID (외래 키)
    RECEIVER_ID VARCHAR(15) NOT NULL, -- 알림을 받을 사용자 ID (외래 키)
    IS_SEEN BOOLEAN NOT NULL DEFAULT FALSE, -- 알림 확인 여부
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 알림 생성 시간
    PRIMARY KEY (NOTIFICATION_ID),
    FOREIGN KEY (MESSAGE_ID) REFERENCES MESSAGES(MESSAGE_ID) ON DELETE CASCADE,
    FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    INDEX idx_notification_receiver_id (RECEIVER_ID)
) ENGINE=InnoDB;

-- 트리거 정의
DELIMITER $$

-- POST_LIKE에 좋아요 추가 시 POSTS 테이블의 NUM_OF_LIKES 증가 트리거
CREATE TRIGGER increase_post_likes AFTER INSERT ON POST_LIKE
FOR EACH ROW
BEGIN
    UPDATE POSTS
    SET NUM_OF_LIKES = NUM_OF_LIKES + 1
    WHERE POST_ID = NEW.POST_ID;
END$$

-- POST_LIKE에서 좋아요 삭제 시 POSTS 테이블의 NUM_OF_LIKES 감소 트리거
CREATE TRIGGER decrease_post_likes AFTER DELETE ON POST_LIKE
FOR EACH ROW
BEGIN
    UPDATE POSTS
    SET NUM_OF_LIKES = CASE
        WHEN NUM_OF_LIKES > 0 THEN NUM_OF_LIKES - 1
        ELSE 0
    END
    WHERE POST_ID = OLD.POST_ID;
END$$

-- COMMENTS_LIKE에 좋아요 추가 시 COMMENTS 테이블의 NUM_OF_LIKES 증가 트리거
CREATE TRIGGER increase_comment_likes AFTER INSERT ON COMMENTS_LIKE
FOR EACH ROW
BEGIN
    UPDATE COMMENTS
    SET NUM_OF_LIKES = NUM_OF_LIKES + 1
    WHERE COMMENT_ID = NEW.COMMENT_ID;
END$$

-- COMMENTS_LIKE에서 좋아요 삭제 시 COMMENTS 테이블의 NUM_OF_LIKES 감소 트리거
CREATE TRIGGER decrease_comment_likes AFTER DELETE ON COMMENTS_LIKE
FOR EACH ROW
BEGIN
    UPDATE COMMENTS
    SET NUM_OF_LIKES = CASE
        WHEN NUM_OF_LIKES > 0 THEN NUM_OF_LIKES - 1
        ELSE 0
    END
    WHERE COMMENT_ID = OLD.COMMENT_ID;
END$$

-- 메시지 전송 시 알림 생성 트리거
CREATE TRIGGER create_message_notification AFTER INSERT ON MESSAGES
FOR EACH ROW
BEGIN
    INSERT INTO MESSAGE_NOTIFICATIONS (MESSAGE_ID, RECEIVER_ID, IS_SEEN, CREATED_AT)
    VALUES (NEW.MESSAGE_ID, NEW.RECEIVER_ID, FALSE, CURRENT_TIMESTAMP);
END$$

DELIMITER ;
